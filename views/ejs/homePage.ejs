<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/favicon.webp" type="image/webp">

    <title>By A Thread - Home</title>
    <!-- Bootstrap CSS (Optional) -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&family=Merriweather:wght@400;700&display=swap" rel="stylesheet">

    <!-- Custom CSS -->
    <link
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
    rel="stylesheet"
    />
    <link rel="stylesheet" href="homePage.css" />
</head>

<body>
    <!-- Navigation Bar -->
    <header>
      <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
          <div class="container-fluid">
              <a class="navbar-brand d-flex align-items-center" href="/">
                  <img src="/ByAThread.webp" alt="Logo" style="height: 40px; margin-right: 10px;" />
                  By A Thread
              </a>
              <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                  aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                  <span class="navbar-toggler-icon"></span>
              </button>
              <div class="collapse navbar-collapse" id="navbarNav">
                  <ul class="navbar-nav ms-auto">
                      <li class="nav-item">
                          <a class="nav-link active" aria-current="page" href="/homePage">
                              <i class="fas fa-home fa-lg"></i> Home
                          </a>
                      </li>
                      <li class="nav-item">
                          <a class="nav-link" href="/">
                              <i class="fas fa-flag fa-lg"></i> Landing Page
                          </a>
                      </li>
                      <li class="nav-item">
                          <a class="nav-link" href="/about">
                              <i class="fas fa-info-circle fa-lg"></i> About
                          </a>
                      </li>
                      <li class="nav-item position-relative">
                          <a class="nav-link" href="#" onclick="redirectToCart()">
                              <i class="fas fa-shopping-cart fa-lg"></i> Cart
                              <% if (cartItemCount > 0) { %>
                              <span class="badge badge-danger cart-badge"><%= cartItemCount %></span>
                              <% } %>
                          </a>
                      </li>
                      <li class="nav-item">
                          <a class="nav-link" href="#" onclick="redirectToProfile()">
                              <i class="fas fa-user fa-lg"></i> Profile
                          </a>
                      </li>
                      <% if (!username) { %>
                      <li class="nav-item">
                          <a class="nav-link" href="/login">
                              <i class="fas fa-sign-in-alt fa-lg"></i> Login
                          </a>
                      </li>
                      <% } else { %>
                      <li class="nav-item">
                          <a class="nav-link" href="javascript:void(0);" onclick="handleLogout()">
                              <i class="fas fa-sign-out-alt fa-lg"></i> Logout
                          </a>
                      </li>
                      <% } %>
                      <% if (isAdmin) { %>
                      <li class="nav-item">
                          <a class="nav-link" onclick="renderAdminPage()">
                              <i class="fas fa-tools fa-lg"></i> Admin tools
                          </a>
                      </li>
                      <% } %>
                  </ul>
              </div>
          </div>
      </nav>
  </header>
  

    <!-- Title -->
    <div class="container text-center mt-5">
        <h1 class="text-center">Welcome <%= username %>!</h1>
    </div>

    <!-- Weather and Filter Section -->
    <aside class="container mt-4">
        <div class="row align-items-stretch">
            <!-- Weather Widget Column -->
            <div class="col-md-3 d-flex">
                <div id="weatherWidget" class="p-3 bg-light rounded flex-fill">
                    <h4>Current Weather</h4>
                    <p id="weatherLocation">Location: Fetching...</p>
                    <p id="weatherTemp">Temperature: Fetching...</p>
                    <p id="weatherCondition">Condition: Fetching...</p>
                </div>
            </div>

            <!-- Filter Section Column -->
            <div class="col-md-9 d-flex">
                <form id="filterForm" class="row g-3 bg-light rounded p-3 flex-fill" action="/homePage" method="GET">
                    <!-- Name Filter -->
                    <div class="col-md-2">
                        <input type="text" class="form-control" id="filterName" name="name"
                            placeholder="Filter by Name" value="<%= filters.name %>" />
                    </div>
                    <!-- Price Condition -->
                    <div class="col-md-2">
                        <select class="form-control" id="priceCondition" name="priceCondition"
                            onchange="updatePricePlaceholder()">
                            <option value="equal" <%= filters.priceCondition === 'equal' ? 'selected' : '' %>>Equal
                                to</option>
                            <option value="greater" <%= filters.priceCondition === 'greater' ? 'selected' : '' %>>
                                Greater than</option>
                            <option value="less" <%= filters.priceCondition === 'less' ? 'selected' : '' %>>Less
                                than</option>
                            <option value="between" <%= filters.priceCondition === 'between' ? 'selected' : '' %>>
                                Between</option>
                        </select>
                    </div>
                    <!-- Price Filter -->
                    <div class="col-md-2">
                        <input type="number" class="form-control" id="filterPrice" name="price" placeholder="Price"
                            value="<%= typeof filters.price !== 'undefined' ? filters.price : '' %>" />
                    </div>
                    <!-- Max Price (for 'Between' condition) -->
                    <div class="col-md-2" id="priceRange"
                        style="<%= filters.priceCondition === 'between' ? 'display: block;' : 'display: none;' %>">
                        <input type="number" class="form-control" id="filterPriceMax" name="priceMax"
                            placeholder="Max Price" value="<%= typeof filters.priceMax !== 'undefined' ? filters.priceMax : '' %>" />
                    </div>
                    <!-- Category Filter -->
                    <div class="col-md-2">
                        <select class="form-select" id="filterCategory" name="category">
                            <option value="">All Categories</option>
                            <option value="Tops" <%= filters.category === 'Tops' ? 'selected' : '' %>>Tops</option>
                            <option value="Bottoms" <%= filters.category === 'Bottoms' ? 'selected' : '' %>>Bottoms
                            </option>
                            <option value="Outerwear" <%= filters.category === 'Outerwear' ? 'selected' : '' %>>Outerwear
                            </option>
                            <option value="Dresses" <%= filters.category === 'Dresses' ? 'selected' : '' %>>Dresses
                            </option>
                            <option value="Footwear" <%= filters.category === 'Footwear' ? 'selected' : '' %>>Footwear
                            </option>
                            <option value="Accessories" <%= filters.category === 'Accessories' ? 'selected' : '' %>>
                                Accessories</option>
                        </select>
                    </div>
                    <!-- Gender Filter -->
                    <div class="col-md-2">
                        <select class="form-select" id="filterGender" name="gender">
                            <option value="">All Genders</option>
                            <option value="male" <%= filters.gender === 'male' ? 'selected' : '' %>>Male</option>
                            <option value="female" <%= filters.gender === 'female' ? 'selected' : '' %>>Female</option>
                            <option value="unisex" <%= filters.gender === 'unisex' ? 'selected' : '' %>>Unisex</option>
                        </select>
                    </div>
                    <!-- Non Sold Out Filter -->
                    <div class="col-md-2">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="filterNonSoldOut" name="nonSoldOut"
                                value="true" <%= filters.nonSoldOut ? 'checked' : '' %>>
                            <label class="form-check-label" for="filterNonSoldOut">
                                Non Sold Out
                            </label>
                        </div>
                    </div>
                    <!-- Discount -->
                    <div class="col-md-2">
                      <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="filterDiscounted" name="discounted" value="true" <%= filters.discounted ? 'checked' : '' %>>
                        <label class="form-check-label" for="filterDiscounted">
                          Only Products with Discounts
                        </label>
                      </div>
                    </div>
                    <!-- Color Filter Dropdown -->
                    <div class="col-md-2">
                      <select class="form-select" id="filterColor" name="color">
                          <option value="">All Colors</option>
                          <option value="red" <%= filters.color === 'red' ? 'selected' : '' %>>Red</option>
                          <option value="blue" <%= filters.color === 'blue' ? 'selected' : '' %>>Blue</option>
                          <option value="green" <%= filters.color === 'green' ? 'selected' : '' %>>Green</option>
                          <option value="yellow" <%= filters.color === 'yellow' ? 'selected' : '' %>>Yellow</option>
                          <option value="brown" <%= filters.color === 'brown' ? 'selected' : '' %>>Brown</option>
                          <option value="grey" <%= filters.color === 'grey' ? 'selected' : '' %>>Grey</option>
                          <option value="black" <%= filters.color === 'black' ? 'selected' : '' %>>Black</option>
                          <option value="white" <%= filters.color === 'white' ? 'selected' : '' %>>White</option>
                          <!-- Add more basic colors if needed -->
                      </select>
                  </div>

                  <!-- Size Filter Dropdown -->
                  <div class="col-md-2">
                      <select class="form-select" id="filterSize" name="size">
                          <option value="">All Sizes</option>
                          <option value="S" <%= filters.size === 'S' ? 'selected' : '' %>>S</option>
                          <option value="M" <%= filters.size === 'M' ? 'selected' : '' %>>M</option>
                          <option value="L" <%= filters.size === 'L' ? 'selected' : '' %>>L</option>
                          <option value="XL" <%= filters.size === 'XL' ? 'selected' : '' %>>XL</option>
                          <option value="XXL" <%= filters.size === 'XXL' ? 'selected' : '' %>>XXL</option>
                          <!-- Add more sizes if needed -->
                      </select>
                  </div>                    
                    <!-- Filter Button -->
                    <div class="col-md-2">
                      <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-filter"></i> Filter
                      </button>
                    </div>                    
                    <!-- Reset Button -->
                    <div class="col-md-2">
                        <button type="button" class="btn btn-secondary w-100" onclick="resetFilters()">
                          <i class="fas fa-sync-alt"></i> Reset
                        </button>
                    </div>
                    <!-- Wishlist Filter -->
                    <% if (username) { %> <!-- Only show the wishlist filter if the user is logged in -->
                      <div class="col-md-2">
                        <div class="form-check">
                          <input class="form-check-input" type="checkbox" id="filterWishlist" name="wishlist" value="true" <%= filters.wishlist ? 'checked' : '' %>>
                          <label class="form-check-label" for="filterWishlist">
                            Wishlist
                          </label>
                        </div>
                      </div>
                    <% } %>

                </form>
            </div>
        </div>
    </aside>

    <!-- Sliding Gallery -->
    <section class="container mt-5">
      <div id="productCarousel" class="carousel slide mx-auto" data-bs-ride="carousel" data-bs-interval="5000"
          style="max-width: 600px;">
          <div class="carousel-inner">
              <% if (UnFilteredProducts.length > 1) { %>
              <% UnFilteredProducts.forEach((product, index) => { %>
              <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                  <a href="#">
                      <div class="carousel-image-container">
                          <img src="data:image/<%= product.imageType %>;base64,<%= product.image.toString('base64') %>"
                              class="d-block w-100" alt="<%= product.name %>"
                              style="object-fit: cover; height: 300px; border-radius: 10px;">
                          <% if (product.isSoldOut) { %>
                          <div class="sold-out-overlay">Sold Out</div>
                          <% } %>
                      </div>
                  </a>
              </div>
              <% }) %>
              <% } else if (UnFilteredProducts.length === 1) { %>
              <div class="carousel-item active">
                  <a href="#">
                      <div class="carousel-image-container">
                          <img src="data:image/<%= UnFilteredProducts[0].imageType %>;base64,<%= UnFilteredProducts[0].image.toString('base64') %>"
                              class="d-block w-100" alt="<%= UnFilteredProducts[0].name %>"
                              style="object-fit: cover; height: 300px; border-radius: 10px;">
                          <% if (UnFilteredProducts[0].isSoldOut) { %>
                          <div class="sold-out-overlay">Sold Out</div>
                          <% } %>
                      </div>
                  </a>
              </div>
              <% } else { %>
              <!-- Display a message or placeholder when no products are available -->
              <div class="carousel-item active">
                  <div class="carousel-image-container">
                      <p class="text-center">No products available</p>
                  </div>
              </div>
              <% } %>
          </div>
          <% if (UnFilteredProducts.length > 1) { %>
          <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
              <span class="carousel-control-prev-icon" aria-hidden="true"></span>
              <span class="visually-hidden">Previous</span>
          </button>
          <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
              <span class="carousel-control-next-icon" aria-hidden="true"></span>
              <span class="visually-hidden">Next</span>
          </button>
          <% } %>
      </div>
  </section>
  

    <!-- Main Content -->
    <main class="container mt-5">
      <div class="row" id="itemsContainer">
          <% if (products.length === 0) { %>
          <div class="col-12 text-center">
              <h2>No items yet!</h2>
          </div>
          <% } else { %>
            <% products.forEach(product => { %>
              <div class="col-md-4 mb-4">
                <div class="card h-100">
                  <div style="position: relative;">
                    <!-- Discount Badge -->
                    <% if (product.discountPercentage) { %>
                    <div class="discount-badge">
                      <span><%= product.discountPercentage %>% OFF</span>
                    </div>
                    <% } %>
                    <img src="data:image/<%= product.imageType %>;base64,<%= product.image.toString('base64') %>" class="card-img-top" alt="<%= product.name %>" />
                    <% if (product.isSoldOut) { %>
                    <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 0, 0, 0.7); color: white; display: flex; justify-content: center; align-items: center; font-size: 1.5rem;">
                      Sold Out
                    </div>
                    <% } %>
              
                    <!-- Wishlist heart icon -->
                    <span class="wishlist-icon" data-prod-id="<%= product.prodId %>" style="position: absolute; top: 10px; right: 10px; cursor: pointer;" onclick="toggleWishlist('<%= product.prodId %>')">
                      <% if (wishlist.includes(product.prodId)) { %>
                      <i class="fas fa-heart heart-icon text-danger"></i> <!-- Filled heart for items in wishlist -->
                      <% } else { %>
                      <i class="far fa-heart heart-icon"></i> <!-- Outline heart for items not in wishlist -->
                      <% } %>
                    </span>
                  </div>
              
                  <div class="card-body">
                    <h5 class="card-title"><%= product.name %></h5>
                    
                    <% if (product.discountPercentage) { %>
                      <!-- Display original price crossed out and discounted price in red -->
                      <p class="card-text">
                        <strong>Price:</strong> 
                        <span style="text-decoration: line-through;">$<%= product.price.toFixed(2) %></span>
                        <span style="color: red; margin-left: 5px;">
                          <i class="fas fa-arrow-down"></i> $<%= product.discountedPrice %>
                        </span>
                      </p>
                    <% } else { %>
                      <!-- Display the normal price when no discount is available -->
                      <p class="card-text"><strong>Price:</strong> $<%= product.price.toFixed(2) %></p>
                    <% } %>
                    
                    <p class="card-text"><strong>Category:</strong> <%= product.category %></p>
                    <p class="card-text"><strong>Company:</strong> <%= product.company %></p>
                    <p class="card-text"><strong>Gender:</strong> <%= product.gender %></p>
                  
                    <p class="card-text">
                      <strong>Available Colors:</strong>
                      <ul style="list-style-type: none; padding: 0;">
                        <% Object.keys(product.colors).forEach(color => { %>
                          <li style="display: inline-block; margin-right: 10px;">
                            <span 
                              style="display: inline-block; width: 20px; height: 20px; background-color: <%= color %>; border: 1px solid #000; margin-right: 5px;">
                            </span>
                            <strong><%= color %></strong>
                          </li>
                        <% }); %>
                      </ul>
                    </p>
                  
                    <button class="btn btn-primary" onclick="openColorSizeModal('<%= product.prodId %>')" <%= product.isSoldOut ? 'disabled' : '' %>>
                      Add to Cart
                    </button>
                  </div>
                  
                </div>
              </div>
              
            <% }) %>
            
              
          <% } %>
      </div>

      <!-- Pagination Controls -->
      <div class="row mt-4">
          <div class="col text-center">
              <nav aria-label="Page navigation">
                  <ul class="pagination justify-content-center">
                      <% if (currentPage > 1) { %>
                      <li class="page-item">
                          <a class="page-link" href="/homePage?page=<%= currentPage - 1 %>" aria-label="Previous">
                              <span aria-hidden="true">&laquo; Previous</span>
                          </a>
                      </li>
                      <% } %>
                      <% for (let i = 1; i <= totalPages; i++) { %>
                      <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                          <a class="page-link" href="/homePage?page=<%= i %>"><%= i %></a>
                      </li>
                      <% } %>
                      <% if (currentPage < totalPages) { %>
                      <li class="page-item">
                          <a class="page-link" href="/homePage?page=<%= currentPage + 1 %>" aria-label="Next">
                              <span aria-hidden="true">Next &raquo;</span>
                          </a>
                      </li>
                      <% } %>
                  </ul>
              </nav>
          </div>
      </div>
  </main>

<!-- Color and Size Selection Modal -->
<div class="modal fade" id="colorSizeModal" tabindex="-1" aria-labelledby="colorSizeModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="colorSizeModalLabel">Select Color and Size</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <input type="hidden" id="productId" /> <!-- Hidden input for product ID -->

        <div id="colorSelection">
          <h6>Select a Color:</h6>
          <div id="availableColors" class="color-options">
            <!-- Dynamically render available colors here -->
          </div>
        </div>

        <div id="sizeSelection" style="display:none;">
          <h6>Select a Size:</h6>
          <div id="availableSizes" class="size-options">
            <!-- Dynamically render available sizes here -->
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="addToCartButton" disabled>Add to Cart</button>
      </div>
    </div>
  </div>
</div>



    <!-- Footer -->
    <%- include('_footer') %>

    <!-- Bootstrap JS (Optional) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Custom JS -->
    <script>
  let productData = {
    <% products.forEach(product => { %>
      '<%= product.prodId %>': {
        name: '<%= product.name %>',
        colors: <%- JSON.stringify(product.colors) %>
      },
    <% }) %>
  };
  let selectedColor = null;
  let selectedSize = null;

  function openColorSizeModal(prodId) {
  // Set the product ID in the hidden input
  document.getElementById('productId').value = prodId;

  // Fetch product data from the backend (you can use an AJAX call or pass this data in the template)
  const product = productData[prodId];

  // Clear previous selections
  selectedColor = null;
  selectedSize = null;
  document.getElementById('availableColors').innerHTML = '';
  document.getElementById('availableSizes').innerHTML = '';
  document.getElementById('sizeSelection').style.display = 'none';

  // Render available colors
  const colorOptions = Object.keys(product.colors);
  colorOptions.forEach(color => {
    const colorDiv = document.createElement('div');
    colorDiv.classList.add('color-square');
    colorDiv.style.backgroundColor = color;
    colorDiv.onclick = () => handleColorSelection(color, product.colors[color]);
    document.getElementById('availableColors').appendChild(colorDiv);
  });

  // Show the modal
  const modal = new bootstrap.Modal(document.getElementById('colorSizeModal'));
  modal.show();
}



  function handleColorSelection(color, sizes) {
    selectedColor = color;
    document.getElementById('availableSizes').innerHTML = ''; // Clear previous size selections

    // Show size selection
    document.getElementById('sizeSelection').style.display = 'block';

    // Render available sizes
    Object.keys(sizes).forEach(size => {
      const sizeDiv = document.createElement('div');
      sizeDiv.classList.add('size-square');

      if (sizes[size] > 0) {
        sizeDiv.textContent = size;
        sizeDiv.onclick = () => handleSizeSelection(size);
      } else {
        sizeDiv.textContent = `${size}`; // Mark unavailable sizes with an "X"
        sizeDiv.classList.add('unavailable');
      }

      document.getElementById('availableSizes').appendChild(sizeDiv);
    });
  }

  function handleSizeSelection(size) {
  const sizeSquares = document.querySelectorAll('.size-square');
  const selectedSizeDiv = Array.from(sizeSquares).find(square => square.textContent.trim() === size);

  if (selectedSize === size) {
    // Deselect if the same size is clicked again
    selectedSizeDiv.classList.remove('selected-size');
    selectedSize = null;
    document.getElementById('addToCartButton').disabled = true; // Disable the button if no size is selected
  } else {
    // Deselect previous selection and select the new one
    sizeSquares.forEach(square => {
      square.classList.remove('selected-size'); // Remove 'selected-size' class from all squares
    });

    selectedSize = size;
    selectedSizeDiv.classList.add('selected-size'); // Add 'selected-size' class to the selected square
    document.getElementById('addToCartButton').disabled = false; // Enable the button once a size is selected
  }

  // Update the Add to Cart button event
  document.getElementById('addToCartButton').onclick = () => addToCart();
}

function addToCart() {
    const isLoggedIn = '<%= username %>' !== 'undefined' && '<%= username %>' !== '';

    if (!isLoggedIn) {
        window.location.href = '/login';
        return;
    }

    if (!selectedColor) {
        alert('Please select a color.');
        return;
    }

    if (!selectedSize) {
        alert('Please select a size.');
        return;
    }

    const prodId = document.getElementById('productId').value;
    const data = { userName: '<%= username %>', prodId, color: selectedColor, size: selectedSize };

    fetch('/add-to-cart', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
    })
    .then(response => response.json())
    .then(result => {
        if (result.message === 'Product added to cart') {
            alert(result.message);

            // Safely update the cart badge count
            let cartBadge = document.querySelector('.cart-badge');

            // If the cart badge doesn't exist yet, create it dynamically
            if (!cartBadge) {
                const cartLink = document.querySelector('a[href="/cart"]');
                cartBadge = document.createElement('span');
                cartBadge.classList.add('badge', 'badge-danger', 'cart-badge');
                cartLink.appendChild(cartBadge); // Add badge to the cart link
            }

            // Update the cart badge count and make sure it's visible
            cartBadge.textContent = result.cartItemCount;
            cartBadge.style.display = 'inline'; // Ensure the badge is visible

            // Hide the modal after adding to the cart
            const modal = bootstrap.Modal.getInstance(document.getElementById('colorSizeModal'));
            modal.hide();
        } else {
            alert('Failed to add to cart: ' + result.message);
        }
    })
    .catch(error => {
        console.error('Error adding to cart:', error);
        alert('Error adding to cart.');
    });
}

function toggleWishlist(prodId) {
    // Check if the user is logged in
    <% if (!username) { %>
    window.location.href = '/login'; // Redirect to login if not authenticated
    <% } else { %>
    const heartElement = document.querySelector(`.wishlist-icon[data-prod-id="${prodId}"]`);

    if (!heartElement) {
        console.error('Heart element not found for product:', prodId);
        return; // Stop if heartElement is not found
    }

    const heartIcon = heartElement.querySelector('.heart-icon');

    fetch('/toggle-wishlist', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ prodId: prodId }), // Sending product ID to the server
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            if (heartIcon.classList.contains('far')) {
                // Add to wishlist, make the heart red and animate floating hearts
                heartIcon.classList.remove('far');
                heartIcon.classList.add('fas', 'text-danger');
                animateFloatingHearts(heartElement);
            } else if (heartIcon.classList.contains('fas')) {
                // Remove from wishlist, revert the heart icon
                heartIcon.classList.remove('fas', 'text-danger');
                heartIcon.classList.add('far');
            }
        } else {
            console.error('Error toggling wishlist:', data.message);
        }
    })
    .catch(error => {
        console.error('Error toggling wishlist:', error);
    });
    <% } %>
}

function animateFloatingHearts(heartElement) {
    // Create a container for floating hearts
    const heartContainer = document.createElement('div');
    heartContainer.classList.add('floating-hearts-container');

    // Create a few hearts that will float upwards
    for (let i = 0; i < 3; i++) {
        const heart = document.createElement('div');
        heart.classList.add('floating-heart');
        heart.innerHTML = '❤️'; // You can use an emoji or a custom heart icon
        heartContainer.appendChild(heart);
    }

    // Append the container to the heartElement
    heartElement.appendChild(heartContainer);

    // Animate the hearts floating
    setTimeout(() => {
        heartContainer.remove(); // Remove the floating hearts after the animation
    }, 1000); // Keep the hearts visible for 1 second
}





        // Fetch Weather Data
        function fetchWeather() {
            const apiKey = '<%= weatherApiKey %>'; // Replace with your WeatherAPI.com API key
            const url = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=auto:ip`;

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('weatherLocation').textContent = `Location: ${data.location.name}, ${data.location.region}`;
                    document.getElementById('weatherTemp').textContent = `Temperature: ${data.current.temp_c}°C`;

                    // Add emoji based on weather condition
                    let emoji = '';
                    const condition = data.current.condition.text.toLowerCase();

                    if (condition.includes('sunny')) {
                        emoji = '☀️';
                    } else if (condition.includes('cloudy')) {
                        emoji = '☁️';
                    } else if (condition.includes('rain')) {
                        emoji = '🌧️';
                    } else if (condition.includes('snow')) {
                        emoji = '❄️';
                    } else if (condition.includes('thunder')) {
                        emoji = '⛈️';
                    } else if (condition.includes('fog')) {
                        emoji = '🌫️';
                    } else if (condition.includes('clear')) {
                        emoji = '🌕';
                    } else if (condition.includes('wind')) {
                        emoji = '🌬️';
                    } else {
                        emoji = '🌡️'; // Default emoji for other conditions
                    }

                    document.getElementById('weatherCondition').textContent = `Condition: ${data.current.condition.text} ${emoji}`;
                })
                .catch(error => {
                    console.error('Error fetching weather data:', error);
                });
        }

        // Call fetchWeather function on page load
        document.addEventListener('DOMContentLoaded', fetchWeather);

        // Logout function
        function handleLogout() {
            fetch('/logout', {
                method: 'GET',
                credentials: 'same-origin'
            })
                .then(response => {
                    if (response.redirected) {
                        window.location.href = response.url; // Redirect to the login page
                    }
                })
                .catch(error => {
                    console.error('Error during logout:', error);
                    alert('An error occurred while logging out.');
                });
        }

        // Redirect to login if not logged in
        function redirectToLoginIfNotLoggedIn() {
            <% if (!username) { %>
                window.location.href = "/login";
            <% } %>
        }

        function renderAdminPage() {
            window.location.href = "/admin"; // Redirects the user to the /admin page
        }

        function redirectToCart() {
            <% if (!username) { %>
                window.location.href = '/login'; // Redirect to login if not authenticated
            <% } else { %>
                window.location.href = '/cart'; // Redirect to the cart page if logged in
            <% } %>
        }

        function redirectToProfile() {
            <% if (!username) { %>
                window.location.href = '/login'; // Redirect to login if not authenticated
            <% } else { %>
                window.location.href = '/profile'; // Redirect to the profile page if logged in
            <% } %>
        }

        function updatePricePlaceholder() {
            const priceCondition = document.getElementById("priceCondition").value;
            const filterPrice = document.getElementById("filterPrice");
            const priceRange = document.getElementById("priceRange");

            if (priceCondition === "equal") {
                filterPrice.placeholder = "Price";
                priceRange.style.display = "none";
            } else if (priceCondition === "greater") {
                filterPrice.placeholder = "Greater than";
                priceRange.style.display = "none";
            } else if (priceCondition === "less") {
                filterPrice.placeholder = "Less than";
                priceRange.style.display = "none";
            } else if (priceCondition === "between") {
                filterPrice.placeholder = "Min Price";
                priceRange.style.display = "block";
            }
        }

        function resetFilters() {
            window.location.href = "/homePage"; // Reset filters and redirect to homepage
        }

        function handleAddToCart(prodId) {
  <% if (!username) { %>
    window.location.href = '/login'; // Redirect to login if not authenticated
  <% } else { %>
    // Check product availability before adding to cart
    fetch(`/product-availability/${prodId}`)
      .then(response => response.json())
      .then(data => {
        if (!data.available) {
          alert('The product is not available now!');
        } else if (data.inCart) {
          alert('The product is already in your cart! Please change the amount in the cart tab.');
        } else {
          // Proceed to add the product to the cart if available and not already added
          fetch('/add-to-cart', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userName: '<%= username %>', prodId: prodId }),
          })
          .then(response => response.json())
          .then(result => {
            alert(result.message); // Show success or error message
          })
          .catch(error => {
            console.error('Error adding to cart:', error);
            alert('Error adding to cart.');
          });
        }
      })
      .catch(error => {
        console.error('Error checking product availability:', error);
        alert('Error checking product availability.');
      });
  <% } %>
}



    </script>
</body>

</html>
